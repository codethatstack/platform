{"version":3,"file":"codethatstack-portals.js","sources":["ng://@codethatstack/portals/lib/portal-types.ts","ng://@codethatstack/portals/lib/portal-module.registry.ts","ng://@codethatstack/portals/lib/portal-module.directive.ts","ng://@codethatstack/portals/lib/component-portal.registry.ts","ng://@codethatstack/portals/lib/component-resolver.service.ts","ng://@codethatstack/portals/lib/portal-outlet.registry.ts","ng://@codethatstack/portals/lib/portal-injector.ts","ng://@codethatstack/portals/lib/portal.service.ts","ng://@codethatstack/portals/lib/component-portal.directive.ts","ng://@codethatstack/portals/lib/portal-outlet.directive.ts","ng://@codethatstack/portals/lib/portals.module.ts","ng://@codethatstack/portals/codethatstack-portals.ts"],"sourcesContent":["import { NgModuleFactory, Type, NgModuleRef, InjectionToken, ViewContainerRef, Injector } from '@angular/core';\r\n\r\nexport const PORTAL_MODULE_TOKEN = new InjectionToken<ModuleLoaderDef[]>('Portal Modules');\r\nexport const PORTAL_COMPONENTS_TOKEN = new InjectionToken<ComponentRegistryItem[]>('Portal Components');\r\nexport const PORTAL_CONTEXT_DATA = new InjectionToken<any>('Portal Context Data');\r\n\r\nexport interface ModuleLoaderDef {\r\n  moduleId: string,\r\n  load: () => Promise<NgModuleFactory<any>|Type<any>|any>\r\n}\r\n\r\nexport type ModuleRegistryType =\r\n  { name: string, path: string }\r\n  | ModuleLoaderDef\r\n  | string;\r\n\r\nexport interface ComponentRegistryItem {\r\n  componentId: string;\r\n  componentType?: Type<any>;\r\n  moduleId?: ModuleRegistryType;\r\n  module?: NgModuleRef<any>;\r\n}\r\n\r\nexport interface CreateComponentParams {\r\n  componentId: string;\r\n  outletId?: string;\r\n  viewContainerRef: ViewContainerRef;\r\n  injector?: Injector;\r\n  context?: any;\r\n  content?: any[][];\r\n}","import { Injectable, NgModuleRef, Injector, Compiler, NgModuleFactoryLoader, NgModuleFactory, Optional, Inject } from '@angular/core';\r\nimport { Observable, isObservable, from, of } from 'rxjs';\r\nimport { map, tap, switchMap } from 'rxjs/operators';\r\nimport { ModuleLoaderDef, ModuleRegistryType, PORTAL_MODULE_TOKEN } from './portal-types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PortalModuleRegistry {\r\n\r\n  private _registry = new Map<string, ModuleLoaderDef>();\r\n  private _cache = new Map<string, any>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(PORTAL_MODULE_TOKEN) lazyModules: ModuleLoaderDef[],\r\n    private injector: Injector,\r\n    private compiler: Compiler,\r\n    @Optional() private moduleLoader: NgModuleFactoryLoader) {\r\n\r\n    if (lazyModules != null) {\r\n      this.register(lazyModules);\r\n    }\r\n  }\r\n\r\n  public register(moduleLoaderDefs: ModuleLoaderDef[]): void {\r\n    moduleLoaderDefs.forEach(value => {\r\n      this._registry.set(value.moduleId, value);\r\n    });\r\n  }\r\n\r\n  public getOrLoad(moduleDef: ModuleRegistryType, localInjector?: Injector): Observable<NgModuleRef<any>> {\r\n    return new Observable(subscriber => {\r\n      if (moduleDef instanceof NgModuleRef) {\r\n        subscriber.next(moduleDef);\r\n        subscriber.complete();\r\n        return;\r\n      }\r\n\r\n      const moduleId = this.getModuleId(moduleDef);\r\n      const moduleReference = this._cache.get(moduleId);\r\n\r\n      if (moduleReference != null) {\r\n        if (isObservable(moduleReference)) {\r\n          moduleReference.subscribe(subscriber);\r\n        } else {\r\n          subscriber.next(moduleReference);\r\n          subscriber.complete();\r\n        }\r\n        return;\r\n      }\r\n\r\n      let loader$: Observable<NgModuleFactory<any>>;\r\n\r\n      if (typeof moduleDef === 'string') {\r\n\r\n        const registryValue = this._registry.get(moduleDef);\r\n        if (registryValue == null) {\r\n          subscriber.error(`No NgModule module loader specified for ${moduleDef}`);\r\n          return;\r\n        }\r\n\r\n        loader$ = from(registryValue.load())\r\n          .pipe(\r\n            switchMap(moduleOrFactory => {\r\n              if (moduleOrFactory instanceof NgModuleFactory) {\r\n                return of(moduleOrFactory);\r\n              }\r\n              return from(this.compiler.compileModuleAsync(moduleOrFactory));\r\n            }),\r\n          );\r\n\r\n      } else {\r\n        /** Deprecated */\r\n        const pathAndModule = `${moduleDef['path']}#${moduleDef['name']}`;\r\n        loader$ = from(this.moduleLoader.load(pathAndModule));\r\n      }\r\n\r\n      const factory$ = loader$.pipe(\r\n          map((factory: NgModuleFactory<any>) => factory.create(localInjector || this.injector)),\r\n          tap(ngModuleRef => this._cache.set(moduleId, ngModuleRef)));\r\n\r\n      this._cache.set(moduleId, factory$);\r\n      factory$.subscribe(v => subscriber.next(v));\r\n    });\r\n  }\r\n\r\n  private getModuleId(moduleDef: ModuleRegistryType): string {\r\n    if (typeof moduleDef === 'string') {\r\n      return moduleDef;\r\n    }\r\n    return moduleDef['moduleId'] ?? moduleDef['name'];\r\n  }\r\n\r\n}","import { Directive, Input, HostListener, Output, EventEmitter, NgModuleRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { PortalModuleRegistry } from './portal-module.registry';\r\n\r\n@Directive({\r\n  selector: '[ctsPortalModule]',\r\n  exportAs: 'ctsPortalModule'\r\n})\r\nexport class PortalModuleDirective {\r\n\r\n  public isLoaded = false;\r\n  private _errorLoading = false;\r\n  private _loading: Subscription;\r\n\r\n  @Input('ctsPortalModule') moduleId: string;\r\n  @Output() loaded = new EventEmitter<NgModuleRef<any>>();\r\n\r\n  constructor(private portalModuleRegistry: PortalModuleRegistry) { }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter() {\r\n    if (!this.isLoaded && !this._errorLoading && this.moduleId != null && this._loading == null) {\r\n      // Only need to load first time mouse enters\r\n      this._loading = this.portalModuleRegistry.getOrLoad(this.moduleId)\r\n        .subscribe(\r\n          module => {\r\n            this.isLoaded = true;\r\n            this.loaded.emit(module);\r\n          },\r\n          err => { this._errorLoading = true }\r\n        );\r\n    }\r\n  }\r\n\r\n}","import { Injectable, NgModuleRef, Optional, Inject } from '@angular/core';\r\nimport { ComponentRegistryItem, PORTAL_COMPONENTS_TOKEN } from './portal-types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ComponentPortalRegistry {\r\n\r\n  private _registry = new Map<string, ComponentRegistryItem>();\r\n  private _modules = new Map<string, ComponentRegistryItem[]>();\r\n\r\n  constructor(@Optional() @Inject(PORTAL_COMPONENTS_TOKEN) lazyComponents: ComponentRegistryItem[]) {\r\n    this.registerComponents(lazyComponents)\r\n  }\r\n\r\n  public register(moduleId: string, values: ComponentRegistryItem[], moduleRef?: NgModuleRef<any>): void {\r\n    if (!this._modules.has(moduleId)) {\r\n      this._modules.set(moduleId, values);\r\n    }\r\n    this.registerComponents(values, moduleRef);\r\n  }\r\n\r\n  public get(componentId: string): ComponentRegistryItem {\r\n    return this._registry.get(componentId);\r\n  }\r\n\r\n  private registerComponents(values: ComponentRegistryItem[], moduleRef?: NgModuleRef<any>): void {\r\n    if (values == null) return;\r\n\r\n    values.forEach(item => {\r\n      this._registry.set(item.componentId, { ...item, module: moduleRef });\r\n    });\r\n  }\r\n}","\r\nimport { Injectable, ComponentFactory, Injector, NgModuleRef, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ComponentPortalRegistry } from './component-portal.registry';\r\nimport { PortalModuleRegistry } from './portal-module.registry';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ComponentResolverService {\r\n\r\n  constructor(\r\n    private moduleRegistry: PortalModuleRegistry,\r\n    private componentRegistry: ComponentPortalRegistry) { }\r\n\r\n  public getComponentFactory(componentId: string): Observable<[ComponentFactory<any>, Injector]> {\r\n\r\n    return new Observable(subscriber => {\r\n\r\n      let componentRegItem = this.componentRegistry.get(componentId);\r\n      if (componentRegItem == null) {\r\n        subscriber.error(`ComponentId ${componentId} is not registered`);\r\n      }\r\n\r\n      if (componentRegItem.moduleId == null && componentRegItem.module == null) {\r\n        subscriber.error(`Module for ${componentId} is not defined`);\r\n      }\r\n\r\n      const factoryResolver = (moduleRef: NgModuleRef<any>, componentType: Type<any>) => {\r\n        const componentFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(componentType);\r\n        subscriber.next([componentFactory, moduleRef.injector]);\r\n        subscriber.complete();\r\n      }\r\n\r\n      if (componentRegItem.module != null) {\r\n        factoryResolver(componentRegItem.module, componentRegItem.componentType);\r\n      } else {\r\n        this.moduleRegistry.getOrLoad(componentRegItem.moduleId)\r\n          .subscribe(moduleRef => {\r\n            if (componentRegItem.componentType == null) {\r\n              componentRegItem = this.componentRegistry.get(componentId); // Retrieve entry again after module has been loaded.\r\n              if (componentRegItem.componentType == null) {\r\n                throw new Error(`Component ${componentId} type has not been registered`);\r\n              }\r\n            }\r\n            factoryResolver(moduleRef, componentRegItem.componentType);\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n}","import { Injectable, ViewContainerRef } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PortalOutletRegistry {\r\n\r\n  private _targets: Map<string, ViewContainerRef> = new Map<string, ViewContainerRef>();\r\n\r\n  register(outletId: string, viewContainer: ViewContainerRef): void {\r\n    this._targets.set(outletId, viewContainer);\r\n  }\r\n\r\n  remove(outletId: string): void {\r\n    this._targets.delete(outletId);\r\n  }\r\n\r\n  getTarget(outletId: string): ViewContainerRef | null {\r\n    return this._targets.has(outletId)\r\n      ? this._targets.get(outletId)\r\n      : null;\r\n  }\r\n\r\n}\r\n","import { Injector } from '@angular/core';\r\n\r\nexport class PortalInjector implements Injector {\r\n  constructor(\r\n    private _parentInjector: Injector,\r\n    private _customTokens: WeakMap<any, any>) { }\r\n\r\n  get(token: any, notFoundValue?: any): any {\r\n    const value = this._customTokens.get(token);\r\n\r\n    if (typeof value !== 'undefined') {\r\n      return value;\r\n    }\r\n\r\n    return this._parentInjector.get<any>(token, notFoundValue);\r\n  }\r\n}\r\n","import { Injectable, ComponentRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ComponentResolverService } from './component-resolver.service';\r\nimport { PortalOutletRegistry } from './portal-outlet.registry';\r\nimport { PortalInjector } from './portal-injector';\r\nimport { PORTAL_CONTEXT_DATA, CreateComponentParams } from './portal-types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PortalService {\r\n\r\n  constructor(\r\n    private componentResolverService: ComponentResolverService,\r\n    private portalOutletRegistry: PortalOutletRegistry) { }\r\n\r\n  createComponent({ componentId, outletId, viewContainerRef, injector, context, content }: CreateComponentParams): Observable<ComponentRef<any>> {\r\n    const hostContainerRef = outletId != null ? this.portalOutletRegistry.getTarget(outletId) : viewContainerRef;\r\n\r\n    return this.componentResolverService.getComponentFactory(componentId)\r\n      .pipe(\r\n        map(([componentFactory, moduleInjector]) => {\r\n          const injectionTokens = new WeakMap<any, any>([\r\n            [PORTAL_CONTEXT_DATA, context]\r\n          ]);\r\n          const portalInjector = new PortalInjector(injector ?? moduleInjector, injectionTokens);\r\n\r\n          const componentRef = componentFactory.create(portalInjector, content);\r\n          hostContainerRef.clear();\r\n          hostContainerRef.insert(componentRef.hostView);\r\n          componentRef.changeDetectorRef.markForCheck();\r\n          return componentRef;\r\n        })\r\n      );\r\n  }\r\n}","import { Directive, Input, ViewContainerRef, OnChanges, SimpleChanges, ComponentRef, Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { tap, switchMap } from 'rxjs/operators';\r\nimport { PortalService } from './portal.service';\r\n\r\n@Directive({\r\n  selector: '[ctsComponentPortal]',\r\n  exportAs: 'ctsComponentPortal'\r\n})\r\nexport class ComponentPortalDirective implements OnChanges, OnDestroy {\r\n\r\n  private _componentRef: ComponentRef<any>;\r\n  private _componentId$ = new Subject<string>();\r\n  private _subscription: Subscription;\r\n\r\n  @Input('ctsComponentPortal') componentId: string;\r\n  @Input('ctsComponentPortalAttachTo') attachTo: string;\r\n  @Input('ctsComponentPortalContext') context: any;\r\n  @Input('ctsComponentPortalContent') content: any[][];\r\n\r\n  @Output() activated = new EventEmitter<ComponentRef<any>>();\r\n  @Output() deactivated = new EventEmitter<ComponentRef<any>>();\r\n\r\n  constructor(\r\n    private portalService: PortalService,\r\n    private viewContainerRef: ViewContainerRef) {\r\n\r\n    this._subscription = this._componentId$\r\n        .pipe(\r\n          tap(() => this.destroyComponent()),\r\n          switchMap(componentId => {\r\n            return this.portalService.createComponent({\r\n              componentId,\r\n              viewContainerRef,\r\n              outletId: this.attachTo,\r\n              context: this.context,\r\n              content: this.content\r\n            });\r\n          })\r\n        )\r\n        .subscribe(componentRef => {\r\n          this._componentRef = componentRef;\r\n          this.activated.emit(this._componentRef);\r\n          this._componentRef.changeDetectorRef.markForCheck();\r\n        });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.componentId != null) {\r\n      this._componentId$.next(changes.componentId.currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._subscription.unsubscribe();\r\n    this.destroyComponent();\r\n  }\r\n\r\n  private destroyComponent(): void {\r\n    if (this._componentRef) {\r\n      this.deactivated.emit(this._componentRef);\r\n      this.viewContainerRef.clear();\r\n      this._componentRef.destroy();\r\n      this._componentRef = null;\r\n    }\r\n  }\r\n\r\n}","import { Directive, Input, OnInit, ViewContainerRef, OnDestroy } from '@angular/core';\r\nimport { PortalOutletRegistry } from './portal-outlet.registry';\r\n\r\n@Directive({\r\n  selector: '[ctsPortalOutlet]'\r\n})\r\nexport class PortalOutletDirective implements OnInit, OnDestroy {\r\n\r\n  @Input('ctsPortalOutlet') outletId: string;\r\n\r\n  constructor(\r\n      private portalOutletRegistry: PortalOutletRegistry,\r\n      private viewContainer: ViewContainerRef) { }\r\n\r\n  ngOnInit(): void {\r\n    this.portalOutletRegistry.register(this.outletId, this.viewContainer);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.portalOutletRegistry.remove(this.outletId);\r\n  }\r\n\r\n}\r\n","import { NgModule, NgModuleFactoryLoader, SystemJsNgModuleLoader } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PortalModuleDirective } from './portal-module.directive';\nimport { ComponentPortalDirective } from './component-portal.directive';\nimport { PortalOutletDirective } from './portal-outlet.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    PortalModuleDirective,\n    ComponentPortalDirective,\n    PortalOutletDirective\n  ],\n  providers: [\n    // Might drop support for old magic string implementation\n    {\n      provide: NgModuleFactoryLoader,\n      useClass: SystemJsNgModuleLoader\n    }\n  ],\n  exports: [\n    PortalModuleDirective,\n    ComponentPortalDirective,\n    PortalOutletDirective\n  ]\n})\nexport class CtsPortalsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {ComponentResolverService as ɵa} from './lib/component-resolver.service';"],"names":[],"mappings":"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"}