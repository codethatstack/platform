{"version":3,"file":"component-resolver.service.js","sourceRoot":"ng://@codethatstack/portals/","sources":["lib/component-resolver.service.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,UAAU,EAAiD,MAAM,eAAe,CAAC;AAC1F,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,uBAAuB,EAAE,MAAM,6BAA6B,CAAC;AACtE,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;;;;AAIhE,IAAa,wBAAwB,GAArC,MAAa,wBAAwB;IAEnC,YACU,cAAoC,EACpC,iBAA0C;QAD1C,mBAAc,GAAd,cAAc,CAAsB;QACpC,sBAAiB,GAAjB,iBAAiB,CAAyB;IAAI,CAAC;IAElD,mBAAmB,CAAC,WAAmB;QAE5C,OAAO,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;YAEjC,IAAI,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC/D,IAAI,gBAAgB,IAAI,IAAI,EAAE;gBAC5B,UAAU,CAAC,KAAK,CAAC,eAAe,WAAW,oBAAoB,CAAC,CAAC;aAClE;YAED,IAAI,gBAAgB,CAAC,QAAQ,IAAI,IAAI,IAAI,gBAAgB,CAAC,MAAM,IAAI,IAAI,EAAE;gBACxE,UAAU,CAAC,KAAK,CAAC,cAAc,WAAW,iBAAiB,CAAC,CAAC;aAC9D;YAED,MAAM,eAAe,GAAG,CAAC,SAA2B,EAAE,aAAwB,EAAE,EAAE;gBAChF,MAAM,gBAAgB,GAAG,SAAS,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;gBACnG,UAAU,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACxD,UAAU,CAAC,QAAQ,EAAE,CAAC;YACxB,CAAC,CAAA;YAED,IAAI,gBAAgB,CAAC,MAAM,IAAI,IAAI,EAAE;gBACnC,eAAe,CAAC,gBAAgB,CAAC,MAAM,EAAE,gBAAgB,CAAC,aAAa,CAAC,CAAC;aAC1E;iBAAM;gBACL,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC;qBACrD,SAAS,CAAC,SAAS,CAAC,EAAE;oBACrB,IAAI,gBAAgB,CAAC,aAAa,IAAI,IAAI,EAAE;wBAC1C,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,qDAAqD;wBACjH,IAAI,gBAAgB,CAAC,aAAa,IAAI,IAAI,EAAE;4BAC1C,MAAM,IAAI,KAAK,CAAC,aAAa,WAAW,+BAA+B,CAAC,CAAC;yBAC1E;qBACF;oBACD,eAAe,CAAC,SAAS,EAAE,gBAAgB,CAAC,aAAa,CAAC,CAAC;gBAC7D,CAAC,CAAC,CAAC;aACN;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CAEF,CAAA;;YAvC2B,oBAAoB;YACjB,uBAAuB;;;AAJzC,wBAAwB;IADpC,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qCAIP,oBAAoB;QACjB,uBAAuB;GAJzC,wBAAwB,CA0CpC;SA1CY,wBAAwB","sourcesContent":["\r\nimport { Injectable, ComponentFactory, Injector, NgModuleRef, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ComponentPortalRegistry } from './component-portal.registry';\r\nimport { PortalModuleRegistry } from './portal-module.registry';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ComponentResolverService {\r\n\r\n  constructor(\r\n    private moduleRegistry: PortalModuleRegistry,\r\n    private componentRegistry: ComponentPortalRegistry) { }\r\n\r\n  public getComponentFactory(componentId: string): Observable<[ComponentFactory<any>, Injector]> {\r\n\r\n    return new Observable(subscriber => {\r\n\r\n      let componentRegItem = this.componentRegistry.get(componentId);\r\n      if (componentRegItem == null) {\r\n        subscriber.error(`ComponentId ${componentId} is not registered`);\r\n      }\r\n\r\n      if (componentRegItem.moduleId == null && componentRegItem.module == null) {\r\n        subscriber.error(`Module for ${componentId} is not defined`);\r\n      }\r\n\r\n      const factoryResolver = (moduleRef: NgModuleRef<any>, componentType: Type<any>) => {\r\n        const componentFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(componentType);\r\n        subscriber.next([componentFactory, moduleRef.injector]);\r\n        subscriber.complete();\r\n      }\r\n\r\n      if (componentRegItem.module != null) {\r\n        factoryResolver(componentRegItem.module, componentRegItem.componentType);\r\n      } else {\r\n        this.moduleRegistry.getOrLoad(componentRegItem.moduleId)\r\n          .subscribe(moduleRef => {\r\n            if (componentRegItem.componentType == null) {\r\n              componentRegItem = this.componentRegistry.get(componentId); // Retrieve entry again after module has been loaded.\r\n              if (componentRegItem.componentType == null) {\r\n                throw new Error(`Component ${componentId} type has not been registered`);\r\n              }\r\n            }\r\n            factoryResolver(moduleRef, componentRegItem.componentType);\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n}"]}