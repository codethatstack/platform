{"version":3,"file":"portal-module.registry.js","sourceRoot":"ng://@codethatstack/portals/","sources":["lib/portal-module.registry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, NgModuleRef, Injector, Compiler, NgModuleFactoryLoader, NgModuleFactory, Optional, Inject } from '@angular/core';\r\nimport { Observable, isObservable, from, of } from 'rxjs';\r\nimport { map, tap, switchMap } from 'rxjs/operators';\r\nimport { ModuleLoaderDef, ModuleRegistryType, PORTAL_MODULE_TOKEN } from './portal-types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PortalModuleRegistry {\r\n\r\n  private _registry = new Map<string, ModuleLoaderDef>();\r\n  private _cache = new Map<string, any>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(PORTAL_MODULE_TOKEN) lazyModules: ModuleLoaderDef[],\r\n    private injector: Injector,\r\n    private compiler: Compiler,\r\n    @Optional() private moduleLoader: NgModuleFactoryLoader) {\r\n\r\n    if (lazyModules != null) {\r\n      this.register(lazyModules);\r\n    }\r\n  }\r\n\r\n  public register(moduleLoaderDefs: ModuleLoaderDef[]): void {\r\n    moduleLoaderDefs.forEach(value => {\r\n      this._registry.set(value.moduleId, value);\r\n    });\r\n  }\r\n\r\n  public getOrLoad(moduleDef: ModuleRegistryType, localInjector?: Injector): Observable<NgModuleRef<any>> {\r\n    return new Observable(subscriber => {\r\n      if (moduleDef instanceof NgModuleRef) {\r\n        subscriber.next(moduleDef);\r\n        subscriber.complete();\r\n        return;\r\n      }\r\n\r\n      const moduleId = this.getModuleId(moduleDef);\r\n      const moduleReference = this._cache.get(moduleId);\r\n\r\n      if (moduleReference != null) {\r\n        if (isObservable(moduleReference)) {\r\n          moduleReference.subscribe(subscriber);\r\n        } else {\r\n          subscriber.next(moduleReference);\r\n          subscriber.complete();\r\n        }\r\n        return;\r\n      }\r\n\r\n      let loader$: Observable<NgModuleFactory<any>>;\r\n\r\n      if (typeof moduleDef === 'string') {\r\n\r\n        const registryValue = this._registry.get(moduleDef);\r\n        if (registryValue == null) {\r\n          subscriber.error(`No NgModule module loader specified for ${moduleDef}`);\r\n          return;\r\n        }\r\n\r\n        loader$ = from(registryValue.load())\r\n          .pipe(\r\n            switchMap(moduleOrFactory => {\r\n              if (moduleOrFactory instanceof NgModuleFactory) {\r\n                return of(moduleOrFactory);\r\n              }\r\n              return from(this.compiler.compileModuleAsync(moduleOrFactory));\r\n            }),\r\n          );\r\n\r\n      } else {\r\n        /** Deprecated */\r\n        const pathAndModule = `${moduleDef['path']}#${moduleDef['name']}`;\r\n        loader$ = from(this.moduleLoader.load(pathAndModule));\r\n      }\r\n\r\n      const factory$ = loader$.pipe(\r\n          map((factory: NgModuleFactory<any>) => factory.create(localInjector || this.injector)),\r\n          tap(ngModuleRef => this._cache.set(moduleId, ngModuleRef)));\r\n\r\n      this._cache.set(moduleId, factory$);\r\n      factory$.subscribe(v => subscriber.next(v));\r\n    });\r\n  }\r\n\r\n  private getModuleId(moduleDef: ModuleRegistryType): string {\r\n    if (typeof moduleDef === 'string') {\r\n      return moduleDef;\r\n    }\r\n    return moduleDef['moduleId'] ?? moduleDef['name'];\r\n  }\r\n\r\n}"]}