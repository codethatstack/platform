{"version":3,"file":"portal-types.js","sourceRoot":"ng://@codethatstack/portals/","sources":["lib/portal-types.ts"],"names":[],"mappings":"AAAA,OAAO,EAAsC,cAAc,EAA8B,MAAM,eAAe,CAAC;AAE/G,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,cAAc,CAAoB,gBAAgB,CAAC,CAAC;AAC3F,MAAM,CAAC,MAAM,uBAAuB,GAAG,IAAI,cAAc,CAA0B,mBAAmB,CAAC,CAAC;AACxG,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,cAAc,CAAM,qBAAqB,CAAC,CAAC","sourcesContent":["import { NgModuleFactory, Type, NgModuleRef, InjectionToken, ViewContainerRef, Injector } from '@angular/core';\r\n\r\nexport const PORTAL_MODULE_TOKEN = new InjectionToken<ModuleLoaderDef[]>('Portal Modules');\r\nexport const PORTAL_COMPONENTS_TOKEN = new InjectionToken<ComponentRegistryItem[]>('Portal Components');\r\nexport const PORTAL_CONTEXT_DATA = new InjectionToken<any>('Portal Context Data');\r\n\r\nexport interface ModuleLoaderDef {\r\n  moduleId: string,\r\n  load: () => Promise<NgModuleFactory<any>|Type<any>|any>\r\n}\r\n\r\nexport type ModuleRegistryType =\r\n  { name: string, path: string }\r\n  | ModuleLoaderDef\r\n  | string;\r\n\r\nexport interface ComponentRegistryItem {\r\n  componentId: string;\r\n  componentType?: Type<any>;\r\n  moduleId?: ModuleRegistryType;\r\n  module?: NgModuleRef<any>;\r\n}\r\n\r\nexport interface CreateComponentParams {\r\n  componentId: string;\r\n  outletId?: string;\r\n  viewContainerRef: ViewContainerRef;\r\n  injector?: Injector;\r\n  context?: any;\r\n  content?: any[][];\r\n}"]}