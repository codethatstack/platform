{"version":3,"file":"portal.service.js","sourceRoot":"ng://@codethatstack/portals/","sources":["lib/portal.service.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAgB,MAAM,eAAe,CAAC;AAEzD,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,wBAAwB,EAAE,MAAM,8BAA8B,CAAC;AACxE,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAChE,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,mBAAmB,EAAyB,MAAM,gBAAgB,CAAC;;;;AAG5E;IAEE,uBACU,wBAAkD,EAClD,oBAA0C;QAD1C,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,yBAAoB,GAApB,oBAAoB,CAAsB;IAAI,CAAC;IAEzD,uCAAe,GAAf,UAAgB,EAA8F;YAA5F,4BAAW,EAAE,sBAAQ,EAAE,sCAAgB,EAAE,sBAAQ,EAAE,oBAAO,EAAE,oBAAO;QACnF,IAAM,gBAAgB,GAAG,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC;QAE7G,OAAO,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,WAAW,CAAC;aAClE,IAAI,CACH,GAAG,CAAC,UAAC,EAAkC;gBAAlC,kBAAkC,EAAjC,wBAAgB,EAAE,sBAAc;YACpC,IAAM,eAAe,GAAG,IAAI,OAAO,CAAW;gBAC5C,CAAC,mBAAmB,EAAE,OAAO,CAAC;aAC/B,CAAC,CAAC;YACH,IAAM,cAAc,GAAG,IAAI,cAAc,CAAC,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,cAAc,EAAE,eAAe,CAAC,CAAC;YAEvF,IAAM,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;YACtE,gBAAgB,CAAC,KAAK,EAAE,CAAC;YACzB,gBAAgB,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC/C,YAAY,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;YAC9C,OAAO,YAAY,CAAC;QACtB,CAAC,CAAC,CACH,CAAC;IACN,CAAC;;gBArBmC,wBAAwB;gBAC5B,oBAAoB;;;IAJzC,aAAa;QADzB,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;yCAIG,wBAAwB;YAC5B,oBAAoB;OAJzC,aAAa,CAyBzB;wBAlCD;CAkCC,AAzBD,IAyBC;SAzBY,aAAa","sourcesContent":["import { Injectable, ComponentRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ComponentResolverService } from './component-resolver.service';\r\nimport { PortalOutletRegistry } from './portal-outlet.registry';\r\nimport { PortalInjector } from './portal-injector';\r\nimport { PORTAL_CONTEXT_DATA, CreateComponentParams } from './portal-types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PortalService {\r\n\r\n  constructor(\r\n    private componentResolverService: ComponentResolverService,\r\n    private portalOutletRegistry: PortalOutletRegistry) { }\r\n\r\n  createComponent({ componentId, outletId, viewContainerRef, injector, context, content }: CreateComponentParams): Observable<ComponentRef<any>> {\r\n    const hostContainerRef = outletId != null ? this.portalOutletRegistry.getTarget(outletId) : viewContainerRef;\r\n\r\n    return this.componentResolverService.getComponentFactory(componentId)\r\n      .pipe(\r\n        map(([componentFactory, moduleInjector]) => {\r\n          const injectionTokens = new WeakMap<any, any>([\r\n            [PORTAL_CONTEXT_DATA, context]\r\n          ]);\r\n          const portalInjector = new PortalInjector(injector ?? moduleInjector, injectionTokens);\r\n\r\n          const componentRef = componentFactory.create(portalInjector, content);\r\n          hostContainerRef.clear();\r\n          hostContainerRef.insert(componentRef.hostView);\r\n          componentRef.changeDetectorRef.markForCheck();\r\n          return componentRef;\r\n        })\r\n      );\r\n  }\r\n}"]}