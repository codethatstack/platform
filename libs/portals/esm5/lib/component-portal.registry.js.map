{"version":3,"file":"component-portal.registry.js","sourceRoot":"ng://@codethatstack/portals/","sources":["lib/component-portal.registry.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAe,QAAQ,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAC1E,OAAO,EAAyB,uBAAuB,EAAE,MAAM,gBAAgB,CAAC;;;AAGhF;IAKE,iCAAyD,cAAuC;QAHxF,cAAS,GAAG,IAAI,GAAG,EAAiC,CAAC;QACrD,aAAQ,GAAG,IAAI,GAAG,EAAmC,CAAC;QAG5D,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAA;IACzC,CAAC;IAEM,0CAAQ,GAAf,UAAgB,QAAgB,EAAE,MAA+B,EAAE,SAA4B;QAC7F,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;SACrC;QACD,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC7C,CAAC;IAEM,qCAAG,GAAV,UAAW,WAAmB;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;IAEO,oDAAkB,GAA1B,UAA2B,MAA+B,EAAE,SAA4B;QAAxF,iBAMC;QALC,IAAI,MAAM,IAAI,IAAI;YAAE,OAAO;QAE3B,MAAM,CAAC,OAAO,CAAC,UAAA,IAAI;YACjB,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,wBAAO,IAAI,KAAE,MAAM,EAAE,SAAS,IAAG,CAAC;QACvE,CAAC,CAAC,CAAC;IACL,CAAC;;4CArBY,QAAQ,YAAI,MAAM,SAAC,uBAAuB;;;IAL5C,uBAAuB;QADnC,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;QAMpB,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,uBAAuB,CAAC,CAAA;;OAL7C,uBAAuB,CA2BnC;kCA/BD;CA+BC,AA3BD,IA2BC;SA3BY,uBAAuB","sourcesContent":["import { Injectable, NgModuleRef, Optional, Inject } from '@angular/core';\r\nimport { ComponentRegistryItem, PORTAL_COMPONENTS_TOKEN } from './portal-types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ComponentPortalRegistry {\r\n\r\n  private _registry = new Map<string, ComponentRegistryItem>();\r\n  private _modules = new Map<string, ComponentRegistryItem[]>();\r\n\r\n  constructor(@Optional() @Inject(PORTAL_COMPONENTS_TOKEN) lazyComponents: ComponentRegistryItem[]) {\r\n    this.registerComponents(lazyComponents)\r\n  }\r\n\r\n  public register(moduleId: string, values: ComponentRegistryItem[], moduleRef?: NgModuleRef<any>): void {\r\n    if (!this._modules.has(moduleId)) {\r\n      this._modules.set(moduleId, values);\r\n    }\r\n    this.registerComponents(values, moduleRef);\r\n  }\r\n\r\n  public get(componentId: string): ComponentRegistryItem {\r\n    return this._registry.get(componentId);\r\n  }\r\n\r\n  private registerComponents(values: ComponentRegistryItem[], moduleRef?: NgModuleRef<any>): void {\r\n    if (values == null) return;\r\n\r\n    values.forEach(item => {\r\n      this._registry.set(item.componentId, { ...item, module: moduleRef });\r\n    });\r\n  }\r\n}"]}