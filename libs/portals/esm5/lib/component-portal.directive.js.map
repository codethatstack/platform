{"version":3,"file":"component-portal.directive.js","sourceRoot":"ng://@codethatstack/portals/","sources":["lib/component-portal.directive.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,gBAAgB,EAAE,SAAS,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC5I,OAAO,EAAE,OAAO,EAAgB,MAAM,MAAM,CAAC;AAC7C,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAMjD;IAcE,kCACU,aAA4B,EAC5B,gBAAkC;QAF5C,iBAsBC;QArBS,kBAAa,GAAb,aAAa,CAAe;QAC5B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAbpC,kBAAa,GAAG,IAAI,OAAO,EAAU,CAAC;QAQpC,cAAS,GAAG,IAAI,YAAY,EAAqB,CAAC;QAClD,gBAAW,GAAG,IAAI,YAAY,EAAqB,CAAC;QAM5D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa;aAClC,IAAI,CACH,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,EAClC,SAAS,CAAC,UAAA,WAAW;YACnB,OAAO,KAAI,CAAC,aAAa,CAAC,eAAe,CAAC;gBACxC,WAAW,aAAA;gBACX,gBAAgB,kBAAA;gBAChB,QAAQ,EAAE,KAAI,CAAC,QAAQ;gBACvB,OAAO,EAAE,KAAI,CAAC,OAAO;gBACrB,OAAO,EAAE,KAAI,CAAC,OAAO;aACtB,CAAC,CAAC;QACL,CAAC,CAAC,CACH;aACA,SAAS,CAAC,UAAA,YAAY;YACrB,KAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC;YACxC,KAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;QACtD,CAAC,CAAC,CAAC;IACT,CAAC;IAED,8CAAW,GAAX,UAAY,OAAsB;QAChC,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;YAC/B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;SAC3D;IACH,CAAC;IAED,8CAAW,GAAX;QACE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QACjC,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAEO,mDAAgB,GAAxB;QACE,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC1C,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;YAC9B,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;YAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC3B;IACH,CAAC;;gBAzCwB,aAAa;gBACV,gBAAgB;;IAVf;QAA5B,KAAK,CAAC,oBAAoB,CAAC;;iEAAqB;IACZ;QAApC,KAAK,CAAC,4BAA4B,CAAC;;8DAAkB;IAClB;QAAnC,KAAK,CAAC,2BAA2B,CAAC;;6DAAc;IACb;QAAnC,KAAK,CAAC,2BAA2B,CAAC;;6DAAkB;IAE3C;QAAT,MAAM,EAAE;;+DAAmD;IAClD;QAAT,MAAM,EAAE;;iEAAqD;IAZnD,wBAAwB;QAJpC,SAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;YAChC,QAAQ,EAAE,oBAAoB;SAC/B,CAAC;yCAgByB,aAAa;YACV,gBAAgB;OAhBjC,wBAAwB,CA0DpC;IAAD,+BAAC;CAAA,AA1DD,IA0DC;SA1DY,wBAAwB","sourcesContent":["import { Directive, Input, ViewContainerRef, OnChanges, SimpleChanges, ComponentRef, Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { tap, switchMap } from 'rxjs/operators';\r\nimport { PortalService } from './portal.service';\r\n\r\n@Directive({\r\n  selector: '[ctsComponentPortal]',\r\n  exportAs: 'ctsComponentPortal'\r\n})\r\nexport class ComponentPortalDirective implements OnChanges, OnDestroy {\r\n\r\n  private _componentRef: ComponentRef<any>;\r\n  private _componentId$ = new Subject<string>();\r\n  private _subscription: Subscription;\r\n\r\n  @Input('ctsComponentPortal') componentId: string;\r\n  @Input('ctsComponentPortalAttachTo') attachTo: string;\r\n  @Input('ctsComponentPortalContext') context: any;\r\n  @Input('ctsComponentPortalContent') content: any[][];\r\n\r\n  @Output() activated = new EventEmitter<ComponentRef<any>>();\r\n  @Output() deactivated = new EventEmitter<ComponentRef<any>>();\r\n\r\n  constructor(\r\n    private portalService: PortalService,\r\n    private viewContainerRef: ViewContainerRef) {\r\n\r\n    this._subscription = this._componentId$\r\n        .pipe(\r\n          tap(() => this.destroyComponent()),\r\n          switchMap(componentId => {\r\n            return this.portalService.createComponent({\r\n              componentId,\r\n              viewContainerRef,\r\n              outletId: this.attachTo,\r\n              context: this.context,\r\n              content: this.content\r\n            });\r\n          })\r\n        )\r\n        .subscribe(componentRef => {\r\n          this._componentRef = componentRef;\r\n          this.activated.emit(this._componentRef);\r\n          this._componentRef.changeDetectorRef.markForCheck();\r\n        });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.componentId != null) {\r\n      this._componentId$.next(changes.componentId.currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._subscription.unsubscribe();\r\n    this.destroyComponent();\r\n  }\r\n\r\n  private destroyComponent(): void {\r\n    if (this._componentRef) {\r\n      this.deactivated.emit(this._componentRef);\r\n      this.viewContainerRef.clear();\r\n      this._componentRef.destroy();\r\n      this._componentRef = null;\r\n    }\r\n  }\r\n\r\n}"]}