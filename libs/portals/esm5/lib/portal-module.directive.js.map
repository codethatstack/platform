{"version":3,"file":"portal-module.directive.js","sourceRoot":"ng://@codethatstack/portals/","sources":["lib/portal-module.directive.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,YAAY,EAAe,MAAM,eAAe,CAAC;AAElG,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAMhE;IASE,+BAAoB,oBAA0C;QAA1C,yBAAoB,GAApB,oBAAoB,CAAsB;QAPvD,aAAQ,GAAG,KAAK,CAAC;QAChB,kBAAa,GAAG,KAAK,CAAC;QAIpB,WAAM,GAAG,IAAI,YAAY,EAAoB,CAAC;IAEU,CAAC;IAGnE,4CAAY,GAAZ;QADA,iBAaC;QAXC,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;YAC3F,4CAA4C;YAC5C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC;iBAC/D,SAAS,CACR,UAAA,MAAM;gBACJ,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC3B,CAAC,EACD,UAAA,GAAG,IAAM,KAAI,CAAC,aAAa,GAAG,IAAI,CAAA,CAAC,CAAC,CACrC,CAAC;SACL;IACH,CAAC;;gBAfyC,oBAAoB;;IAHpC;QAAzB,KAAK,CAAC,iBAAiB,CAAC;;2DAAkB;IACjC;QAAT,MAAM,EAAE;;yDAA+C;IAKxD;QADC,YAAY,CAAC,YAAY,CAAC;;;;6DAa1B;IAxBU,qBAAqB;QAJjC,SAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;YAC7B,QAAQ,EAAE,iBAAiB;SAC5B,CAAC;yCAU0C,oBAAoB;OATnD,qBAAqB,CA0BjC;IAAD,4BAAC;CAAA,AA1BD,IA0BC;SA1BY,qBAAqB","sourcesContent":["import { Directive, Input, HostListener, Output, EventEmitter, NgModuleRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { PortalModuleRegistry } from './portal-module.registry';\r\n\r\n@Directive({\r\n  selector: '[ctsPortalModule]',\r\n  exportAs: 'ctsPortalModule'\r\n})\r\nexport class PortalModuleDirective {\r\n\r\n  public isLoaded = false;\r\n  private _errorLoading = false;\r\n  private _loading: Subscription;\r\n\r\n  @Input('ctsPortalModule') moduleId: string;\r\n  @Output() loaded = new EventEmitter<NgModuleRef<any>>();\r\n\r\n  constructor(private portalModuleRegistry: PortalModuleRegistry) { }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter() {\r\n    if (!this.isLoaded && !this._errorLoading && this.moduleId != null && this._loading == null) {\r\n      // Only need to load first time mouse enters\r\n      this._loading = this.portalModuleRegistry.getOrLoad(this.moduleId)\r\n        .subscribe(\r\n          module => {\r\n            this.isLoaded = true;\r\n            this.loaded.emit(module);\r\n          },\r\n          err => { this._errorLoading = true }\r\n        );\r\n    }\r\n  }\r\n\r\n}"]}